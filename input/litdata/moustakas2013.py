"""
Moustakas, et al. 2013, ApJ, 767, 50
"""

import numpy as np

info = \
{
 'reference':'Moustakas, et al. 2013, ApJ, 767, 50',
 'data': 'Table 3', 
 'imf': ('chabrier', (0.1, 100.)), #didn't update this
}

redshifts = [0.10165, 0.25, 0.35, 0.45, 0.575, 0.725, 0.9] #approx
wavelength = 1600. #mulit-wavelength

ULIM = -1e10 #or this

fits = {}

# Table 3
tmp_data = {}
tmp_data['smf_tot'] = \
{
 0.1: {'M': list(10**np.arange(9.0, 12.1, 0.1)),
     'phi': [-1.889,  -1.923,  -1.970,  -2.031,  -2.055,  -2.106,  -2.144,  -2.179,  -2.188,  -2.2160, 
             -2.2340, -2.2350, -2.2620, -2.2520, -2.2850, -2.3170, -2.3650, -2.4190, -2.5040, -2.6070, 
             -2.7280, -2.8880, -3.1040, -3.3320, -3.6060, -3.953, -4.363, -4.778, -5.255, -5.87, -6.49],
     'err': [(0.017, 0.017), (0.017, 0.016), (0.015, 0.015), (0.015, 0.014), (0.014, 0.013), (0.012, 0.012),
             (0.012, 0.011), (0.012, 0.012), (0.010, 0.010), (0.0086, 0.0084), (0.008, 0.0078), (0.0069, 0.0068),
             (0.0063, 0.0062), (0.0056, 0.0056), (0.0051, 0.0051), (0.0047, 0.0046), (0.0044, 0.0044), (0.0041, 0.0041),
             (0.0040, 0.0040), (0.0039, 0.0039), (0.0040, 0.0040), (0.0043, 0.0043), (0.0049, 0.0048), (0.0059, 0.0059),
             (0.0080, 0.0079), (0.012, 0.012), (0.020, 0.019), (0.033, 0.031), (0.060, 0.053), (0.10, 0.10), (0.30, 0.20)],
    },
      
}


tmp_data['smf_sf'] = \
{
 0.1: {'M': list(10**np.arange(9.0, 12.1, 0.1)),
     'phi': [-2.026,  -2.026,  -2.129,  -2.201,  -2.211,  -2.272,  -2.313,  -2.362,  -2.371,  -2.4120, 
             -2.4450, -2.4700, -2.5240, -2.5410, -2.6090, -2.6600, -2.7370, -2.8110, -2.9340, -3.0770, 
             -3.2500, -3.4720, -3.769, -4.102, -4.487, -4.930, -5.437, -5.98, -6.30, -6.77, -7.09],
     'err': [(0.018, 0.017), (0.017, 0.016), (0.015, 0.015), (0.014, 0.014), (0.014, 0.013), (0.012, 0.012),
             (0.012, 0.012), (0.011, 0.011), (0.011, 0.011), (0.0092, 0.0090), (0.0090, 0.0088), (0.0079, 0.0078),
             (0.0074, 0.0072), (0.0071, 0.0070), (0.0066, 0.0065), (0.0063, 0.0062), (0.0062, 0.0061), (0.0059, 0.0059),
             (0.0061, 0.0060), (0.0064, 0.0063), (0.0071, 0.0070), (0.0085, 0.0084), (0.011, 0.010), (0.016, 0.015),
             (0.024, 0.023), (0.042, 0.038), (0.079, 0.067), (0.20, 0.10), (0.30, 0.20), (0.60, 0.30), (1.00, 0.40)],
    },
}


tmp_data['smf_q'] = \
{
 0.1: {'M': list(10**np.arange(9.00, 12.1, 0.1)),
     'phi': [-1.889,  -1.923,  -1.970,  -2.031,  -2.055,  -2.106,  -2.144,  -2.179,  -2.188,  -2.2160, 
             -2.2340, -2.2350, -2.2620, -2.2520, -2.2850, -2.3170, -2.3650, -2.4190, -2.5040, -2.6070, 
             -2.7280, -2.8880, -3.1040, -3.3320, -3.6060, -3.953, -4.363, -4.778, -5.255, -5.87, -6.49],
     'err': [(0.017, 0.017), (0.017, 0.016), (0.015, 0.015), (0.015, 0.014), (0.014, 0.013), (0.012, 0.012),
             (0.012, 0.011), (0.012, 0.012), (0.010, 0.010), (0.0086, 0.0084), (0.008, 0.0078), (0.0069, 0.0068),
             (0.0063, 0.0062), (0.0056, 0.0056), (0.0051, 0.0051), (0.0047, 0.0046), (0.0044, 0.0044), (0.0041, 0.0041),
             (0.0040, 0.0040), (0.0039, 0.0039), (0.0040, 0.0040), (0.0043, 0.0043), (0.0049, 0.0048), (0.0059, 0.0059),
             (0.0080, 0.0079), (0.012, 0.012), (0.020, 0.019), (0.033, 0.031), (0.060, 0.053), (0.10, 0.10), (0.30, 0.20)],
    },
}


units = {'smf_tot': 'log10', 'smf_sf': 'log10', 'smf': 'log10', 'smf_q': 'log10'}

data = {}
data['smf_tot'] = {}
data['smf_sf'] = {}
data['smf_q'] = {}
for group in ['smf_tot', 'smf_sf', 'smf_q']:
    
    for key in tmp_data[group]:
        
        if key not in tmp_data[group]:
            continue
    
        subdata = tmp_data[group]
        
        mask = []
        for element in subdata[key]['err']:
            if element == ULIM:
                mask.append(1)
            else:
                mask.append(0)
        
        mask = np.array(mask)
        
        data[group][key] = {}
        data[group][key]['M'] = np.ma.array(subdata[key]['M'], mask=mask) 
        data[group][key]['phi'] = np.ma.array(subdata[key]['phi'], mask=mask) 
        data[group][key]['err'] = tmp_data[group][key]['err']

#default is the star-forming galaxies data only
data['smf'] = data['smf_sf']